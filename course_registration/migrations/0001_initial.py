# Generated by Django 4.2.3 on 2024-04-25 16:23

import cloudinary.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('menu_position', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['menu_position'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('teacher', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='CourseSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('session_fee', models.IntegerField(default=0)),
                ('session_fee_cash', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalCourse',
            fields=[
                ('course_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='course_registration.course')),
                ('organizer', models.CharField(blank=True, max_length=200)),
                ('url', models.URLField()),
            ],
            bases=('course_registration.course',),
        ),
        migrations.CreateModel(
            name='InternalCourse',
            fields=[
                ('course_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='course_registration.course')),
                ('registration_status', models.IntegerField(choices=[(0, 'Closed'), (1, 'Open')], default=0)),
                ('description', models.TextField(blank=True)),
                ('registration_start_date', models.DateField(blank=True)),
                ('registration_end_date', models.DateField(blank=True)),
                ('organizer', models.CharField(blank=True, default='DANBW', max_length=200)),
                ('course_fee', models.IntegerField()),
                ('course_fee_cash', models.IntegerField()),
                ('discount_percentage', models.IntegerField(default=50)),
                ('bank_transfer_until', models.DateField()),
            ],
            bases=('course_registration.course',),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('dojo', models.CharField(choices=[('AAR', 'Aikido am Rhein'), ('AVE', 'Aikido Verein Emmendingen'), ('AVF', 'Aikido Verein Freiburg'), ('TVD', 'Turnverein Denzlingen')], max_length=3)),
                ('grade', models.IntegerField(choices=[(0, 'Red Belt 🔴'), (1, '6th Kyu ⚪️'), (2, '5th Kyu 🟡'), (3, '4th Kyu 🟠'), (4, '3rd Kyu 🟢'), (5, '2nd Kyu 🔵'), (6, '1st Kyu 🟤'), (7, '1st Dan ⚫️'), (8, '2nd  Dan ⚫️'), (9, '3rd Dan ⚫️'), (10, '4th Dan ⚫️'), (11, '5th Dan ⚫️'), (12, '6th Dan ⚫️')], default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Published')], default=0)),
                ('featured_image', cloudinary.models.CloudinaryField(default='placeholder', max_length=255, verbose_name='image')),
                ('content', models.TextField()),
                ('menu_position', models.IntegerField(default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='course_registration.category')),
            ],
            options={
                'ordering': ['menu_position'],
            },
        ),
        migrations.CreateModel(
            name='UserCourseRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('exam', models.BooleanField(default=False)),
                ('exam_grade', models.IntegerField(choices=[(1, '7th Kyu ⚪️'), (2, '5th Kyu 🟡'), (3, '4th Kyu 🟠'), (4, '3rd Kyu 🟢'), (5, '2nd Kyu 🔵'), (6, '1st Kyu 🟤')], default=0)),
                ('exam_passed', models.BooleanField(null=True)),
                ('grade_updated', models.BooleanField(default=False)),
                ('accept_terms', models.BooleanField(default=False)),
                ('discount', models.BooleanField(default=False)),
                ('final_fee', models.IntegerField(default=0)),
                ('payment_status', models.IntegerField(choices=[(0, 'Unpaid'), (1, 'Paid')], default=0)),
                ('payment_method', models.IntegerField(choices=[(0, 'Bank Transfer'), (1, 'Cash')], default=0)),
                ('comment', models.TextField(blank=True)),
                ('selected_sessions', models.ManyToManyField(to='course_registration.coursesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course_registration.internalcourse')),
            ],
        ),
        migrations.CreateModel(
            name='GuestCourseRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('dojo', models.CharField(choices=[('AAR', 'Aikido am Rhein'), ('AVE', 'Aikido Verein Emmendingen'), ('AVF', 'Aikido Verein Freiburg'), ('TVD', 'Turnverein Denzlingen')], max_length=3)),
                ('grade', models.IntegerField(choices=[(0, 'Red Belt 🔴'), (1, '6th Kyu ⚪️'), (2, '5th Kyu 🟡'), (3, '4th Kyu 🟠'), (4, '3rd Kyu 🟢'), (5, '2nd Kyu 🔵'), (6, '1st Kyu 🟤'), (7, '1st Dan ⚫️'), (8, '2nd  Dan ⚫️'), (9, '3rd Dan ⚫️'), (10, '4th Dan ⚫️'), (11, '5th Dan ⚫️'), (12, '6th Dan ⚫️')], default=0)),
                ('exam', models.BooleanField(default=False)),
                ('exam_grade', models.IntegerField(blank=True, choices=[(1, '7th Kyu ⚪️'), (2, '5th Kyu 🟡'), (3, '4th Kyu 🟠'), (4, '3rd Kyu 🟢'), (5, '2nd Kyu 🔵'), (6, '1st Kyu 🟤')], null=True)),
                ('accept_terms', models.BooleanField(default=False)),
                ('discount', models.BooleanField(default=False)),
                ('final_fee', models.IntegerField(default=0)),
                ('payment_status', models.IntegerField(choices=[(0, 'Unpaid'), (1, 'Paid')], default=0)),
                ('payment_method', models.IntegerField(choices=[(0, 'Bank Transfer'), (1, 'Cash')], default=0)),
                ('comment', models.TextField(blank=True)),
                ('selected_sessions', models.ManyToManyField(to='course_registration.coursesession')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course_registration.internalcourse')),
            ],
        ),
        migrations.AddField(
            model_name='coursesession',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='course_registration.internalcourse'),
        ),
        migrations.AddConstraint(
            model_name='usercourseregistration',
            constraint=models.UniqueConstraint(fields=('user', 'course'), name='unique_user_registration'),
        ),
        migrations.AddConstraint(
            model_name='guestcourseregistration',
            constraint=models.UniqueConstraint(fields=('email', 'course'), name='unique_guest_registration'),
        ),
    ]
